Search a 2D Matrix

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted from left to right. The first integer of each row is greater than the last integer of the previous row. For example, Consider the following matrix: 
[
	[1,   3,  5,  7],
	[10, 11, 16, 20],
	[23, 30, 34, 50]
]
Given target = 3, return true.
public class Solution{
    public boolean searchMatrix(int[][] matrix, int target){
    }
}
Analysis:
Original thought includes 2 steps. First find out which row target number probably belongs to, then search the target row. Time complexity of this approach is O(m + n).
public class Solution{
    public boolean searchMatrix(int[][] matrix, int target){
        int row = matrix.length;
        int col = matrix[0].length;
        int targetRow = 0;
        if(row == 0 || col ==0){
			return false;
        }
        for(int i = 0; i < row; i++){
            if(target == matrix[i][0]){
				return true;
			}            
            if(target < matrix[i][0]){
                if(i == 0){
					return false;
                }
                targetRow = i - 1;
                break;
            } 
            targetRow = row - 1;
        }
        for(int i = 0; i< col; i++){
            if(matrix[targetRow][i] == target){
				return true;
			}
        }
        return false;
    }
}