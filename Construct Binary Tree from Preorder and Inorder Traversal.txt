Construct Binary Tree from Preorder and Inorder Traversal
Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if (inorder == null || preorder == null || inorder.length != preorder.length)
            return null;
        int n = inorder.length;
        return buildTree(preorder, inorder, 0, n - 1, 0, n - 1);
    }
    
    //dfs 根据前序遍历和中序遍历生成二叉树
    public TreeNode buildTree(int[] preorder, int[] inorder, int s1, int e1, int s2, int e2) {
        if (s1 >= inorder.length || s2 >= inorder.length) return null;
        if (s1 == e1) return new TreeNode(preorder[s1]);
        if (s1 > e1 || s2 > e2) return null;
        
        //前序遍历数组的第一个是根节点
        int rootval = preorder[s1];
        TreeNode root = new TreeNode(rootval);
        int i;
        
        //根据根节点在中序遍历数组里面找到左子树和右子数节点的个数
        for (i = s2; i <= e2; i++) {
            if(inorder[i] == rootval)
                break;
        }
        int leftlength = i - s2;
        int rightlength = e2 - i;
        
        //dfs
        root.left = buildTree(preorder, inorder, s1 + 1, s1 + leftlength, s2, i - 1);
        root.right = buildTree(preorder, inorder, s1 + leftlength + 1, e1, i + 1, e2);
        return root;
    }
}




















