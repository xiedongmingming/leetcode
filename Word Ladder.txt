Word Ladder

Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:
1. Only one letter can be changed at a time
2. Each intermediate word must exist in the dictionary
For example,
Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.
Note:
Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.

public class Solution{
    public int ladderLength(String start, String end, HashSet<String> dict){
        if(start == null || end == null){
			return 0;
		}
        HashMap<String, Integer> visited = new HashMap<String, Integer>();
        visited.put(start, 1);
        int size = start.length();
        String alph = "abcdefghijklmnopqrstuvwxyz";
        for(int i = 0; i < size; i++){
            for(int j = 0; j < 26; j++){
                String tmp = start.substring(0,i) + alph.substring(j, j + 1) + start.substring(i + 1, size);
                if(tmp.equals(end)){
                    return 2;
				}
            }
        }
        Queue<String> queue = new LinkedList<String>();//使用QUEUE BFS
        queue.offer(start);
        while(!queue.isEmpty()){
            String top = queue.poll();
            int step = visited.get(top);
            for(int i = 0; i < size; i++){
                for(int j = 0; j < 26; j++){//每次更换一个字符,然后比较是与end相同或者是否在dict里面
                    String tmp = top.substring(0, i) + alph.substring(j, j + 1) + top.substring(i + 1, size);
                    if(tmp.equals(end)){//如果与end相同就返回
                        return step + 1;
                    }else if(dict.contains(tmp) && !visited.containsKey(tmp)){
                        visited.put(tmp, step + 1);
                        queue.offer(tmp);
                    }
                }
            }
        }
        return 0;
    }
}