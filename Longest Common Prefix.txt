Longest Common Prefix

Write a function to find the longest common prefix string amongst an array of strings. 
public class Solution{
    public String longestCommonPrefix(String[] strs){
        
    }
}
这道题属于字符串处理的题目,思路比较简单,就是bruteforce的想法,以第一个字符串为标准,对于每个字符串从第一个字符开始,看看是不是和标准一致,如果不同,则跳出循环返回当前结果,否则继续下一个字符.时间复杂度应该是O(m*n),m表示字符串的最大长度,n表示字符串的个数,空间复杂度应该是O(m),即字符串的长度,代码如下:以上代码设置了一个标记,来标记是否结束.细心的读者可能发现中间那个循环index是从0开始,按理说不用对第一个字符串进行判断了,因为他是标准,这么做的目的其实是因为leetcode有一个测试集是空串,如果不对0进行判断,那么就没有设置flag为false,跑到第二层就会越界.当然也可以手动判断一下,这个其实是小问题.
public String longestCommonPrefix(String[] strs){
    StringBuilder res = new StringBuilder();
    if(strs == null || strs.length == 0){
        return res.toString();
	}
    boolean sameFlag = true;
    int idx = 0;
    while(sameFlag){
        for(int i = 0; i < strs.length; i++){
            if(strs[i].length() <= idx || strs[i].charAt(idx) != strs[0].charAt(idx)){
                sameFlag = false;
                break;
            }
        }
        if(sameFlag){
            res.append(strs[0].charAt(idx));
		}
        idx++;
    }
    return res.toString();
}
题解:
解题思路是,先对全部String数组预处理惩罚一下,求一个最小长度(最长前缀必然不克不及大于最小长度).然后以第0个字符串作为参照,从第1个字符串到最后一个字符串,对同一地位做断定,有不合字符串返回当前记录的字符串就行.我的代码如下,不是那么简洁都雅,下面有个收拾的更好一些:
private static int MinLength(String[] strs){
	int temp = Integer.MAX_VALUE;
	for(int i = 0; i < strs.length; i++){
		if(temp > strs[i].length())
			temp = strs[i].length();
	}
	return temp;
}
public static String longestCommonPrefix(String[] strs){
	if(strs.length == 0){
		return "";
	}
	int j = 0;
	boolean flag = false;
	int length = MinLength(strs);
	while(j < length){
		int i = 1;
		while(i < strs.length){
			int c = strs[0].charAt(j);
			if(strs[i].charAt(j) == c){
				i++;
			}else{
				flag = true;
				break;
			}
		}
		if(flag)
			break;
		j++;
	}
	return strs[0].substring(0， j);
}
更简洁的代码： 
private int minlen(String[] strs){
	int min = Integer.MAX_VALUE;
	for(int i = 0; i < strs.length; i++)
		min = Math.min(min，strs[i].length());
	return min;
}
public String longestCommonPrefix(String[] strs){
	if(strs == null || strs.length == 0)
		return "";
	StringBuilder res = new StringBuilder();
	int index = 0;
	int len = minlen(strs);
	while(index < len){
		for(int i=1; i<strs.length;i++){
			if(strs[i].charAt(index) != strs[0].charAt(index))
				return res.toString();
		}
		res.append(strs[0].charAt(index));
		index++;
	}
	return res.toString();
}
