Construct Binary Tree from Inorder and Postorder Traversal
Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if (inorder == null || postorder == null || inorder.length != postorder.length)
            return null;
        int n = inorder.length;
        return buildTree(inorder, postorder, 0, n - 1, 0, n - 1);
    }
    
    //根据中序遍历和后序遍历生成二叉树 dfs
    public TreeNode buildTree(int[] inorder, int[] postorder, int s1, int e1, int s2, int e2) {
        if (s1 > e1 || s2 > e2) return null;
        if (s2 == e2) return new TreeNode(postorder[s2]);
        
        //后序遍历数组的最后一个是根节点
        int rootval = postorder[e2];
        TreeNode root = new TreeNode(rootval);
        int i;
        
        //根据根节点在中序遍历数组里面得到左子树和右子数节点的数目
        for (i = s1; i <= e1; i++) {
            if(inorder[i] == rootval)
                break;
        }
        int leftlength = i - s1;
        int rightlength = e1 - i;
        
        //dfs递归
        root.left = buildTree(inorder, postorder, s1, i - 1, s2, s2 + leftlength - 1);
        root.right = buildTree(inorder, postorder, i + 1, e1, e2 - rightlength, e2 - 1);
        return root;
    }
}


















