Unique Binary Search Trees

Given n, how many structurally unique BST's (binary search trees) that store values 1...n? For example, Given n = 3, there are a total of 5 unique BST's.
   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
有些小细节得多注意,比如设置初始值,没有判断n的大小,就给n=2进行赋值.在n=1时就错了……但想想其实n=2时也不需要赋值. 
public class Solution{
    public int numTrees(int n){
        if(n == 1) return 1;
        if(n == 2) return 2;
        if(n == 3) return 5;
        int ans[] = new int[n + 1];
        ans[0] = 1; 
        ans[1] = 1;
        ans[2] = 2;
        ans[3] = 5;
        for(int i = 4; i < n + 1; i++){//DP问题根节点从1循环到i,二叉搜索树的数目等于左子树乘右子数的数目
            for(int j = 1; j <= i; j++){
                ans[i] += ans[j - 1] * ans[i - j];
            }
        }
        return ans[n];
    }
}

public static int numTrees(int n){
	if(n == 1){
		return 0;
	}
	return UniqueBST(1, n);
}
public static int UniqueBST(int start, int end){
	int sum = 0;
	if(start > end){
		return 0;
	}
	if(start == end){
		return 1;
	}else{
		for(int i = start; i <= end; i++){
			if(i == start){
				sum += UniqueBST(start + 1, end);
			}else if(i == end){
				sum += UniqueBST(start, end - 1);
			}else{
				sum += UniqueBST(i + 1, end) * UniqueBST(start, i - 1);
			}
		}
		return sum;
	}
}

