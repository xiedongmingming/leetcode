Reorder List

Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…
You must do this in-place without altering the nodes' values.

For example,
Given {1,2,3,4}, reorder it to {1,4,2,3}.

/**
 * Definition for singly-linked list.
 * class ListNode{
 *     int val;
 *     ListNode next;
 *     ListNode(int x){
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution{
    public void reorderList(ListNode head){
        if(head == null || head.next == null){
            return;
		}
        int size = 0;
        ListNode p = head;
        ListNode q,r,s;
        while(p != null){
            ++size;
            p = p.next;
        }
        p = head;
        int mid = size / 2 - 1 + size % 2;//将链表在mid处截断,size=2时mid=0,size=3时mid=1;
        for(int i = 0; i < mid; i++){
            p = p.next;
        }
        q = p.next;
        p.next = null;
        r = q.next;//将截断后右边的链表反转,头节点为q
        if(r != null){
            s = r.next;
            r.next = q;
            q.next = null;
            q = r;
            r = s;
        }
        while(r != null){
            if(r.next == null){
                r.next = q;
                q = r;
                break;
            }   
            s = r.next;
            r.next = q;
            q = r;
            r = s;
        }
        p = head;//将反转后的右半段链表插入左半段链表
        while(p != null && q != null){
            r = p.next;
            s = q.next;
            p.next = q;
            p.next.next = r;
            p = r;
            q = s;
        }
    }
}
public void reorderList(ListNode head){
	if(head == null || head.next == null){
		return;
	}
	int size = 0;
	ListNode p = head;
	ListNode q,r,s;
	while(p != null){
		++size;
		p = p.next;
	}
	p = head;
	int mid = size / 2 - 1 + size % 2; 
	for(int i = 0; i < mid; i++){
		p = p.next;
	}
	q = p.next;
	p.next = null;
	r = q.next; 
	if(r != null){
		s = r.next;
		r.next = q;
		q.next = null;
		q = r;
		r = s;
	}
	while(r != null){
		if(r.next == null){
			r.next = q;
			q = r;
			break;
		}   
		s = r.next;
		r.next = q;
		q = r;
		r = s;
	}
	p = head; 
	while(p != null && q != null){
		r = p.next;
		s = q.next;
		p.next = q;
		p.next.next = r;
		p = r;
		q = s;
	}
}