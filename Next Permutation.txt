Next Permutation


Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers. 

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order). 

The replacement must be in-place, do not allocate extra memory. 

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1


public class Solution {
    public void nextPermutation(int[] num) {
        
    }
}

这个应该是基础。在C/C++中有封装好的方法可以使用。
其实基本思路应该是这样的。
1、从尾到头寻找第一个相邻的，下降的两个数。如果是出现这种情况，说明还可以找到下一个序列。假设找到的位置是first。
2、根据1，我们可以知道，从尾到first+1，这个序列应该是上升的。从中找到第一个比num[first]大的数，然后和first交换位置。
3、从first+1到len-1进行排序，这样就完成了一次查找过程。
举个例子来说吧。

public class Solution {
    public void nextPermutation(int[] num) {
        if(num == null || num.length == 0){
            return ;
        }
        int len = num.length;
        int first = getFirst(num);
        if(first == -1){
            reverse(num,0,len - 1);
        }else{
            int i = len-1;
            for (; i > first ; i--) {
               if (num[i] > num[first]) {
                    break;
                }
            }
            swap(num, first, i);
		    reverse(num,first+1,len - 1);
        }
    }
    public int getFirst(int []num){
        int len = num.length;
        for(int i = len-2; i >= 0 ; i--){
            if(num[i] < num[i+1]){
                return i;
            }
        }
        return -1;
    }
    public void swap( int[] num, int i, int j ) {
		int tmp = num[i];
		num[i] = num[j];
		num[j] = tmp;
	}
	public void reverse(int []num, int low, int high){
	    while ( low < high ){
            swap(num, low, high);    
		    low++;
		    high--;
		}
	}
}