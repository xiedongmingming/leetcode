Unique Paths II

Follow up for "Unique Paths": Now consider if some obstacles are added to the grids. How many unique paths would there be? An obstacle and empty space is marked as 1 and 0 respectively in the grid. For example, There is one obstacle in the middle of a 3x3 grid as illustrated below.
[
	[0,0,0],
	[0,1,0],
	[0,0,0]
]
The total number of unique paths is 2. Note: m and n will be at most 100.
public class Solution{
    public int uniquePathsWithObstacles(int[][] obstacleGrid){
        
    }
}
和1的思路一样,也是动态规划,但是因为有了障碍,所以如果当前点有障碍,那么到达该点的所有方式就是0,否则为dp[i-1][j]+dp[i][j-1];注意在初始化第一行和第一列的时候,如果有一个点有障碍,那么在此点之后所有点的到达方式都为0.换句话说,后面点的到达方式和前一点的到达方式息息相关.
public class Solution{
    public int uniquePathsWithObstacles(int[][] obstacleGrid){
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int dp[][] = new int[m][n];
        if(obstacleGrid[0][0] == 0){
            dp[0][0] = 1;
        }
        for(int i = 1; i < m; i++){
            if(obstacleGrid[i][0] == 0){
                dp[i][0] = dp[i-1][0];
            }
        }
        for(int j = 1; j < n; j++){
            if(obstacleGrid[0][j] == 0){
                dp[0][j] = dp[0][j-1];
            }
        }
        for(int i = 1; i < m ; i++){
            for(int j = 1; j < n; j++){
                if(obstacleGrid[i][j] == 0){
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
                }
            }
        }
        return dp[m-1][n-1];
    }
}


public static int uniquePathsWithObstacles1(int[][] obstacleGrid){
	int sum = 0;
	if(obstacleGrid == null || obstacleGrid.length == 0){
		return 0;
	}
	int m = obstacleGrid.length;
	int n = obstacleGrid[0].length;
	sum += uniquePaths1(m, n);
	for(int i = 0; i < m; i++){
		for(int j = 0; j < n; j++){
			if(obstacleGrid[i][j] == 1){
				sum -= uniquePaths1(i + 1, j + 1) * uniquePaths1(m - i, n- j);//减掉从原点到该节点乘以从该节点到终点的积
			}
		}
	}
	return sum;
}