Unique Paths

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below). How many possible unique paths are there?
Above is a 3 x 7 grid. How many possible unique paths are there?
Note: m and n will be at most 100.
public class Solution{
    public int uniquePaths(int m, int n){
        
    }
}
求解从起点到终点的所有方式,动态规划吧.状态转移方程dp[i][j]=dp[i-1][j]+dp[i][j-1];
只能向下或向右,求从左上角到右下角的路线数.动态规划,到(i,j)格的路线数p(i,j)=p(i-1,j)+p(i,j-1).
public class Solution{
    public int uniquePaths(int m, int n){
        int dp[][] = new int[m][n];
        for(int i = 0; i < m; i++){
            dp[i][0] = 1;
        }
        for(int j = 0; j < n; j++){
            dp[0][j] = 1;
        }
        for(int i = 1; i < m ; i++){
            for(int j = 1; j < n; j++){
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        return dp[m - 1][n - 1];
    }
}
代码:
class Solution{
public:
	int uniquePaths(int m, int n){
		vector<vector<int>> paths(m, vector<int>(n, 1));
		for(int i = 1; i < m; i++)
			for(int j = 1; j < n; j++)
				paths[i][j] = paths[i - 1][j] + paths[i][j - 1];
		return paths[m - 1][n - 1];
    }
}; 
public static int uniquePaths1(int m, int n){
	int sum = 0;
	if(m == 1 && n == 2){
		return 1;
	}else if(m == 2 && n == 1){
		return 1;
	}
	if(m <= 0 || n <= 0 || (m == 1 && n == 1)){
		return 0;
	}
	sum += uniquePaths1(m - 1, n);
	sum += uniquePaths1(m, n - 1);
	return sum;
}
