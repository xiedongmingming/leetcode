Unique Binary Search Trees II

Given n, generate all structurally unique BST's (binary search trees) that store values 1...n. For example, Given n = 3, your program should return all 5 unique BST's shown below.
   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
/**
 * Definition for binary tree
 * public class TreeNode{
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x){ val = x; left = null; right = null; }
 * }
 */
public class Solution{
    public List<TreeNode> generateTrees(int n){
        
    }
}

public class Solution{
    public ArrayList<TreeNode> generateTrees(int n){
        return put(0, n - 1);
    }
    public ArrayList<TreeNode> put(int left, int right){//递归 
        ArrayList<TreeNode> res = new ArrayList<TreeNode>();
        if(left > right){
            res.add(null);
            return res;
        }
        for(int i = left; i <= right; i++){
            ArrayList<TreeNode> leftNode  = put(left,  i - 1);//leftNode里面保存从left到i-1的所有组合
            ArrayList<TreeNode> rightNode = put(i + 1, right);//rightNode里面保存从i+1到right的所有组合
            for(int j = 0; j < leftNode.size(); j++){
                for(int k = 0; k < rightNode.size(); k++){
                    TreeNode rootNode = new TreeNode(i + 1);//新建一个rootnode左右节点从leftNode和rightNode里面遍历
                    res.add(rootNode);
                    rootNode.left = leftNode.get(j);
                    rootNode.right = rightNode.get(k);
                }
            }
        }
        return res;
    }
}